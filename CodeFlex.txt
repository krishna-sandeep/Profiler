@{
    ViewBag.Title = "Project";
    var IsAccess = MGMService.PermissionService.GetPermission(Request.Url.AbsolutePath, MGMSYSTEM.Helper.UserHelper.GetUserRoleId(System.Web.HttpContext.Current.Request));
    var ProjectTabAccess = MGMService.PermissionService.GetPermission("ProjectTab", MGMSYSTEM.Helper.UserHelper.GetUserRoleId(System.Web.HttpContext.Current.Request));

    bool IsAddTimeSheet = false;
    var ProjectTabTimeSheet = ProjectTabAccess.Childs.Where(x => x.Link == "ProjectTabTimeSheet").FirstOrDefault();
    if (ProjectTabTimeSheet != null)
    {
        IsAddTimeSheet = ProjectTabTimeSheet.CanView;
    }


    //var IsAccess = new MGMModel.ViewModel.PageModel();
    // var AddTimeSheet = IsAccess.Childs.Where(x => x.Text == "Add Time Sheet").FirstOrDefault();
}

<div class="box-body">
    <div class="alert fade in alert-dismissable text-center" id="dvMsg" style="display:none">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
        <strong id="lblMsg"></strong>
    </div>
    <div class="row col-md-12 table-responsive">
        <table id="tblProject" class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Project</th>
                    <th>Technology</th>
                    <th>Customer</th>
                    <th>Team Member</th>
                    <th>Progress</th>
                    <th>Status</th>
                    <th>Planned</th>
                    <th>Actual</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    </div>
    <script type="text/javascript">
        $(document).ready(function () {
            checkMsg();
            LoadProjectData();
            StopLoading();
        });
        function checkMsg() {
            if ($("#lblMsg").text() != "") {
                $("#dvMsg").css("display", "block");
                setTimeout(function () {
                    $("#dvMsg").css("display", "none");
                }, 20000);
            }
        }
        var ProjectTabApi;
        function LoadProjectData() {
            ProjectTabApi = $("#tblProject").DataTable({
                "searchDelay": 1000,
                "serverSide": true,
                "filter": true,
                "orderMulti": false,
                "ajax": {
                    url: '@Url.Action("GetProjectList", "Project")',
                    type: "POST",
                    datatype: "json",
                    error: function (jqXHR, exception) {
                        StopLoading();
                        ShowErrorMsg(jqXHR, exception);
                    }
                },
                "columns": [

                        {
                            "data": "ProjectName",
                            "render": function (data, type, row) {
                                var Editurl = '@Url.Action("Edit", "Project")' + '?projectId=' + row.Id;
                                var ProjectName = "<a href='" + Editurl + "' onclick='Loading()' >" + row.ProjectName + "</a>";
                                return ProjectName + "</br><small>Created " + row.StrPlannedStartDate + "</small>";
                            }
                        },
                        { "data": "Technology" },
                        { "data": "CustomerName" },
                        {
                            "data": "NoOfProjectUser",
                            "render": function (data, type, row) {
                                return renderUserPic(row.NoOfProjectUser);
                            }
                        },

                         {
                             "mRender": function (data, type, row) {
                                 action =  '<div class="progress progress-xs progress-striped active">';
                                 action += '<div class="progress-bar progress-bar-success" style="width: 70%"></div>';
                                 action += '</div> Complete 70%';
                                 return action;
                             }
                         },


                         {
                             "data": "ProjectStatus",
                             "render": function (data, type, row) {
                                 return renderProjectStatus(row.ProjectStatus);
                             }
                         },

                         
                         //{
                         //    "data":"ProjectProgress"
                         //},
                        {
                            "data": "PlannedStartDate",
                            "render": function (data, type, row) {
                                var StartDate = row.StrPlannedStartDate;
                                var EndDate = row.StrPlannedEndDate;
                                var returntext = StartDate != "" ? "Start Date ->" + StartDate : "";
                                returntext += EndDate != "" ? "<br/> End Date ->" + EndDate : "";
                                return returntext;
                            }
                        },
                          {
                              "data": "ActualStartDate",
                              "render": function (data, type, row) {
                                  var StartDate = row.StrActualStartDate;
                                  var EndDate = row.StrActualEndDate;
                                  var returntext = StartDate != "" ? "Start Date ->" + StartDate : "";
                                  returntext += EndDate != "" ? "<br/>End Date -> " + EndDate : "";
                                  return returntext;
                              }
                          },
                        {
                            "mRender": function (data, type, row) {
                                var action = RenderActionHtml(row.Id);
                                return action;
                            }, orderable: false
                        }
                ], "order": [[0, 'asc']],

            });
            $.fn.dataTable.ext.errMode = 'throw';
            HideShowTableColumn("tblProject");
        }
        var RefreshProjectGrid = function () {
            if (ProjectTabApi != null && ProjectTabApi != undefined) {
                ProjectTabApi.draw();
            }
        }

        function renderUserPic(numOfUser) {
            var str = '';
            for (var i = 0; i < numOfUser; i++) {
                str += '<img style="float: left;width: 25px;height: 25px;margin-right: 10px; margin-top: -2px;" src="Images/defaultUserImage.png" class="user-image" alt="User Image">';
            }
            return str;
        }

        function DeleteRecord(ProjectId) {
            DeleteRow('@Url.Action("DeleteProject","Project")', 'POST', { Id: ProjectId }, RefreshProjectGrid);
        }

        function renderProjectStatus(status) {
            var str = '';
            if(status!=null)
               status = status.split(' ').join('');
            if (status == '@MGMModel.Helper.ProjectStatus.InProgress') {
                str = '<span class="label label-success">' + status + '</span>';
            } else if (status == '@MGMModel.Helper.ProjectStatus.NotStarted') {
                str = '<span class="label label-default">' + status + '</span>';
            } else if (status == '@MGMModel.Helper.ProjectStatus.Delivered') {
                str = '<span class="label label-primary">' + status + '</span>';
            } else if (status == '@MGMModel.Helper.ProjectStatus.Delayed') {
                str = '<span class="label label-warning">' + status + '</span>';
            } else if (status == '@MGMModel.Helper.ProjectStatus.Complete') {
                str = '<span class="label label-info">' + status + '</span>';
            } else if (status == '@MGMModel.Helper.ProjectStatus.Cancelled') {
                str = '<span class="label label-danger">' + status + '</span>';
            }
            return str;
        }

        function RenderActionHtml(Id) {
            // var Editurl = "/hrms/Project/Edit?Id=" + Id;
            var Editurl = '@Url.Action("Edit", "Project")' + '?projectId=' + Id;
            var action = "<div class='btn-group'><button type='button' class='btn btn-primary btn-sm dropdown-toggle' data-toggle='dropdown'><b>Action</b><span class='caret'></span></button>";
            action += "<ul class='dropdown-menu dropdown-menu-right' role='menu'>";
            if ('@IsAccess.CanEdit' == "True")
                action += "<li><a href='" + Editurl + "' onclick='Loading()' ><i class='glyphicon glyphicon-edit'></i>&nbsp;Edit</a></li>";

            if ('@IsAddTimeSheet' == "True") {
                action += "<li><a href='javascript:AddTimeSheet(2, null," + Id + ", null, null);'><i class='glyphicon glyphicon-time'></i>&nbsp;Add Time Sheet</a></li>";
                action += "<li><a href='javascript:AddTask(null," + Id + ");'><i class='glyphicon glyphicon-tasks'></i>&nbsp;Add Task</a></li>";
            }

            if ('@IsAccess.CanView' == "True")
                action += "<li><a href='javascript:void(0);'><i class='glyphicon glyphicon-eye-open'></i>&nbsp;View </a></li>";
            if ('@IsAccess.CanDelete' == "True")
                action += "<li><a href='javascript:void(0);' onclick='DeleteRecord(" + Id + ")'><i class='glyphicon glyphicon-trash'></i>&nbsp;Delete</a></li></ul></div>";
            return action;
        }
    </script>


// Controller


 [HttpPost]
        public ActionResult GetProjectList(DataTableFilterModel filter)
        {
            try
            {
                var user = (MGMUser)Session["SignInUser"];
                if (user != null)
                {
                    DataTableFilterModel dataFilter = projectService.GetProjectList(filter, user);
                    return Json(new { draw = filter.draw, recordsFiltered = dataFilter.recordsFiltered, recordsTotal = dataFilter.recordsTotal, data = dataFilter.data },
                            JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return RedirectToAction("Login", "Account");
                }
            }
            catch (Exception ex)
            {
                TempData["msg"] = ExceptionHandler.GetExceptionMessage(ex);
            }
            return Json(new { }, JsonRequestBehavior.AllowGet);
        }

BLL==========

 public DataTableFilterModel GetProjectList(DataTableFilterModel filter, MGMUser user)
        {
            var data = _context.Projects.Include("Customer").Include("ProjectUser").Where(p => p.Active && (user.RoleId==(int)MGMModel.Helper.MGMUserRole.SuperAdmin || p.ProjectEmployee.Where(pe => pe.UserFk == user.Id && !pe.IsDeleted).Any()))
                   .Select(model => new ProjectViewModel()
                   {
                       Id = model.Id,
                       ProjectName = model.ProjectName,
                       PlannedStartDate = model.PlannedStartDate,
                       PlannedEndDate = model.PlannedEndDate,
                       ActualStartDate = model.ActualStartDate,
                       ActualEndDate = model.ActualEndDate,
                       Description = model.Description,
                       Technology = model.Technology,
                       Status = model.Status,
                       Active = model.Active,
                       CreatedBy = model.CreatedBy,
                       DateCreated = model.DateCreated,
                       DateModified = model.DateModified,
                       Type = model.Type,
                       CustomerFk = model.CustomerFk,
                       CustomerName = (model.Customer.FirstName + " " + model.Customer.LastName),
                       NoOfProjectUser = model.ProjectEmployee.Where(pe => !pe.IsDeleted && pe.EndDate == null).Count()
                   }).AsEnumerable();

            var totalCount = data.Count();
            if (!string.IsNullOrWhiteSpace(filter.search.value))
            {
                data = data.Where(d => (d.Technology.ToLower().Contains(filter.search.value.ToLower()) || (!string.IsNullOrEmpty(d.ProjectName) && d.ProjectName.ToLower().Contains(filter.search.value.ToLower()))));
            }

            var o = filter.order[0];
            var name = filter.columns[filter.order[0].column].data;
            if (o.dir == "asc")
            {
                data = data.OrderBy(x => x.GetType().GetProperty(name).GetValue(x));
            }
            else
            {
                data = data.OrderByDescending(x => x.GetType().GetProperty(name).GetValue(x));
            }
            var filteredCount = data.Count();
            filter.recordsTotal = totalCount;
            filter.recordsFiltered = filteredCount;
            filter.data = data.Skip(filter.start).Take(filter.length).ToList();
            foreach (var item in filter.data)
            {
                item.ProjectStatus = CommonFunction.GetDisplayName((ProjectStatus)item.Status);
                if (item.PlannedStartDate != null)
                    item.PlannedStartDate = CommonFunction.ConvertUTCToLocalDateTime(item.PlannedStartDate);
                if (item.PlannedEndDate != null)
                    item.PlannedEndDate = CommonFunction.ConvertUTCToLocalDateTime(item.PlannedEndDate);
                if (item.ActualStartDate != null)
                    item.ActualStartDate = CommonFunction.ConvertUTCToLocalDateTime(item.ActualStartDate);
                if (item.ActualEndDate != null)
                    item.ActualEndDate = CommonFunction.ConvertUTCToLocalDateTime(item.ActualEndDate);
                if (item.DateCreated != null)
                    item.DateCreated = CommonFunction.ConvertUTCToLocalDateTime(item.DateCreated);
                if (item.DateModified != null)
                    item.DateModified = CommonFunction.ConvertUTCToLocalDateTime(item.DateModified);
            }
            return filter;
        }


Model==========

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MGMService
{
    public class DataTableFilterModel
    {
        public class Search
        {
            public string value { get; set; }
            public bool regex { get; set; }
        }
        public class OrderInfo
        {
            public int column { get; set; }
            public string dir { get; set; }
        }
        public class ColumnInfo
        {
            public string data { get; set; }
            public string name { get; set; }
            public bool searchable { get; set; }
            public bool orderable { get; set; }
            public Search search { get; set; }
        }
        public string draw { get; set; }
        public int start { get; set; }
        public int length { get; set; }
        public Search search { get; set; }
        public OrderInfo[] order { get; set; }
        public ColumnInfo[] columns { get; set; }
        public Nullable<int> BaseId { get; set; }
        public IEnumerable<dynamic> data { get; set; }
        public int recordsTotal { get; set; }
        public int recordsFiltered { get; set; }
        public int UserId { get; set; }
        public int CustomerId { get; set; }
        public int CompanyId { get; set; }
        public Guid guId { get; set; }
    }
}


ADD/Edit

 [HttpPost]
        public ActionResult Create(TimeSheetViewModel model)
        {
            TimeSheetViewModel response = new TimeSheetViewModel();
            try
            {
                var UserId = UserHelper.GetUserId(System.Web.HttpContext.Current.Request);
                if (!UserId.HasValue)
                    return RedirectToAction("Index", "Home");
                model.CreatedBy = UserId.Value;
                model.ModifiedBy = UserId.Value;
                model.Active = true;
                TimeSheetService.AddUpdateTimeSheet(TimeSheetViewModel.CopyDataFromViewModelToDBModel(model));
                response.IsSuccess = true;
                response.Message = model.Id > 0 ? "Time Sheet has been updated successfully." : "Time Sheet has been created successfully.";
            }
            catch (Exception ex)
            {
                response.IsSuccess = false;
                response.Exception = ex.ToString() + (ex.InnerException != null ? ex.InnerException.Message : "");
            }
            return Json(response, JsonRequestBehavior.AllowGet);
        }


public TimeSheet AddUpdateTimeSheet(TimeSheet model)
        {
            if (model.Id > 0)
            {
                var data = _context.TimeSheets.Find(model.Id);
                if (data != null)
                {
                    data.LoggedHours = model.LoggedHours;
                    data.Description = model.Description;
                    data.ModifiedBy = model.ModifiedBy;
                    data.StartDateTime = model.StartDateTime;
                    data.DateModified = model.DateModified;
                    data.EndDateTime = model.EndDateTime;
                    data.ProjectFk = model.ProjectFk;
                    data.TaskFk = model.TaskFk;
                    data.IsManualAdded = (data.IsManualAdded || data.StartDateTime != model.StartDateTime || data.EndDateTime != model.EndDateTime);
                }
            }
            else
            {
                model.DateModified = null;
                model.ModifiedBy = null;
                ProjectEmployeeService service = new ProjectEmployeeService(_context);
                var IsBilable = service.IfNotExistsAddProjectEmployee(model.ProjectFk.Value, model.UserFk, model.CreatedBy);
                model.IsBillable = IsBilable;
                _context.TimeSheets.Add(model);
            }
            _context.SaveChanges();
            return model;
        }


for delete=======
 public void RemoveTimeSheet(string Id)
        {
            var timeSheet = _context.TimeSheets.Find(Convert.ToInt32(Id));
            if (timeSheet != null)
            {
                timeSheet.Active = false;
                _context.SaveChanges();
            }
        }